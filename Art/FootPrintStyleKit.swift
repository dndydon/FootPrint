//
//  FootPrintStyleKit.swift
//  FootPrint
//
//  Created by Don Sleeter on 5/6/18.
//  Copyright Â© 2018 Stone Canyon Software. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class FootPrintStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let red: UIColor = UIColor(red: 0.954, green: 0.329, blue: 0.197, alpha: 1.000)
        static let green: UIColor = UIColor(red: 0.080, green: 0.840, blue: 0.032, alpha: 1.000)
        static let orange: UIColor = UIColor(red: 0.940, green: 0.678, blue: 0.011, alpha: 1.000)
        static let goodColor: UIColor = FootPrintStyleKit.green.withHue(0.249)
        static let badColor: UIColor = FootPrintStyleKit.red.withHue(1)
        static let mediumColor: UIColor = FootPrintStyleKit.orange.withSaturation(0.797)
        static let gradient: CGGradient = CGGradient(colorsSpace: nil, colors: [FootPrintStyleKit.red.cgColor, FootPrintStyleKit.green.cgColor] as CFArray, locations: [0, 1])!
        static let shadow: NSShadow = NSShadow(color: UIColor.black, offset: CGSize(width: -1, height: 2), blurRadius: 5)
        static var footPrintDynamicLogo: UIImage?

    }

    //// Colors

    @objc dynamic public class var red: UIColor { return Cache.red }
    @objc dynamic public class var green: UIColor { return Cache.green }
    @objc dynamic public class var orange: UIColor { return Cache.orange }
    @objc dynamic public class var goodColor: UIColor { return Cache.goodColor }
    @objc dynamic public class var badColor: UIColor { return Cache.badColor }
    @objc dynamic public class var mediumColor: UIColor { return Cache.mediumColor }

    //// Gradients

    @objc dynamic public class var gradient: CGGradient { return Cache.gradient }

    //// Shadows

    @objc dynamic public class var shadow: NSShadow { return Cache.shadow }

    //// Images

    @objc dynamic public class var footPrintDynamicLogo: UIImage {
        if Cache.footPrintDynamicLogo == nil {
            Cache.footPrintDynamicLogo = UIImage(named: "1024x1024.png")!
        }
        return Cache.footPrintDynamicLogo!
    }

    //// Drawing Methods

    @objc dynamic public class func drawEcoPrint(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 98, height: 97), resizing: ResizingBehavior = .aspectFit, value: CGFloat = 0.294) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 98, height: 97), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 98, y: resizedFrame.height / 97)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 98, resizedFrame.height / 97)



        //// Variable Declarations
        let yellowLine: CGFloat = 0.505
        let redLine: CGFloat = 0.75
        let limitingColor = value > redLine ? FootPrintStyleKit.badColor : (value > yellowLine ? FootPrintStyleKit.mediumColor : FootPrintStyleKit.goodColor)

        //// WorldImage Drawing
        context.saveGState()
        context.translateBy(x: 0, y: -0.5)
        context.scaleBy(x: 0.1, y: 0.1)

        let worldImagePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 980, height: 975))
        context.saveGState()
        worldImagePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -FootPrintStyleKit.footPrintDynamicLogo.size.height)
        context.draw(FootPrintStyleKit.footPrintDynamicLogo.cgImage!, in: CGRect(x: 0, y: 0, width: FootPrintStyleKit.footPrintDynamicLogo.size.width, height: FootPrintStyleKit.footPrintDynamicLogo.size.height))
        context.restoreGState()

        context.restoreGState()


        //// LeftGroup
        context.saveGState()
        context.setShadow(offset: CGSize(width: FootPrintStyleKit.shadow.shadowOffset.width * resizedShadowScale, height: FootPrintStyleKit.shadow.shadowOffset.height * resizedShadowScale), blur: FootPrintStyleKit.shadow.shadowBlurRadius * resizedShadowScale, color: (FootPrintStyleKit.shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// LeftFoot Drawing
        let leftFootPath = UIBezierPath()
        leftFootPath.move(to: CGPoint(x: 35, y: 35))
        leftFootPath.addCurve(to: CGPoint(x: 24, y: 41), controlPoint1: CGPoint(x: 34, y: 35), controlPoint2: CGPoint(x: 27, y: 38))
        leftFootPath.addCurve(to: CGPoint(x: 20, y: 47), controlPoint1: CGPoint(x: 21, y: 44), controlPoint2: CGPoint(x: 20, y: 45))
        leftFootPath.addCurve(to: CGPoint(x: 31, y: 66), controlPoint1: CGPoint(x: 20, y: 49), controlPoint2: CGPoint(x: 29, y: 63))
        leftFootPath.addCurve(to: CGPoint(x: 39, y: 81), controlPoint1: CGPoint(x: 33, y: 69), controlPoint2: CGPoint(x: 37, y: 79))
        leftFootPath.addCurve(to: CGPoint(x: 47, y: 81), controlPoint1: CGPoint(x: 41, y: 83), controlPoint2: CGPoint(x: 43, y: 83))
        leftFootPath.addCurve(to: CGPoint(x: 51, y: 77), controlPoint1: CGPoint(x: 51, y: 79), controlPoint2: CGPoint(x: 51, y: 79))
        leftFootPath.addCurve(to: CGPoint(x: 50.5, y: 75), controlPoint1: CGPoint(x: 51, y: 75), controlPoint2: CGPoint(x: 50.5, y: 75))
        leftFootPath.addCurve(to: CGPoint(x: 42, y: 62), controlPoint1: CGPoint(x: 50.5, y: 75), controlPoint2: CGPoint(x: 45, y: 68))
        leftFootPath.addCurve(to: CGPoint(x: 39, y: 45), controlPoint1: CGPoint(x: 39, y: 56), controlPoint2: CGPoint(x: 39, y: 49))
        leftFootPath.addCurve(to: CGPoint(x: 39, y: 37), controlPoint1: CGPoint(x: 39, y: 41), controlPoint2: CGPoint(x: 41, y: 39))
        leftFootPath.addCurve(to: CGPoint(x: 35, y: 35), controlPoint1: CGPoint(x: 37, y: 35), controlPoint2: CGPoint(x: 36, y: 35))
        leftFootPath.close()
        limitingColor.setFill()
        leftFootPath.fill()


        //// LeftBigToe Drawing
        context.saveGState()
        context.translateBy(x: 32, y: 29)
        context.rotate(by: -23.73 * CGFloat.pi/180)

        let leftBigToePath = UIBezierPath(ovalIn: CGRect(x: -3, y: -4, width: 6, height: 8))
        limitingColor.setFill()
        leftBigToePath.fill()

        context.restoreGState()


        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 26.5, y: 31.5)
        context.rotate(by: -28.04 * CGFloat.pi/180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -1.5, y: -2.5, width: 3, height: 5))
        limitingColor.setFill()
        oval2Path.fill()

        context.restoreGState()


        //// Oval 3 Drawing
        context.saveGState()
        context.translateBy(x: 23.5, y: 34)
        context.rotate(by: -28.04 * CGFloat.pi/180)

        let oval3Path = UIBezierPath(ovalIn: CGRect(x: -1.5, y: -2.5, width: 3, height: 5))
        limitingColor.setFill()
        oval3Path.fill()

        context.restoreGState()


        //// Oval 4 Drawing
        context.saveGState()
        context.translateBy(x: 20.62, y: 37.22)
        context.rotate(by: -28.04 * CGFloat.pi/180)

        let oval4Path = UIBezierPath(ovalIn: CGRect(x: -1.5, y: -2.25, width: 3, height: 4.5))
        limitingColor.setFill()
        oval4Path.fill()

        context.restoreGState()


        //// Oval 5 Drawing
        context.saveGState()
        context.translateBy(x: 18.43, y: 41.13)
        context.rotate(by: -34.27 * CGFloat.pi/180)

        let oval5Path = UIBezierPath(ovalIn: CGRect(x: -1.5, y: -1.74, width: 3, height: 3.48))
        limitingColor.setFill()
        oval5Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// RightGroup
        context.saveGState()
        context.setShadow(offset: CGSize(width: FootPrintStyleKit.shadow.shadowOffset.width * resizedShadowScale, height: FootPrintStyleKit.shadow.shadowOffset.height * resizedShadowScale), blur: FootPrintStyleKit.shadow.shadowBlurRadius * resizedShadowScale, color: (FootPrintStyleKit.shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// RightFoot Drawing
        context.saveGState()
        context.translateBy(x: 48, y: 26)
        context.rotate(by: -6.58 * CGFloat.pi/180)

        let rightFootPath = UIBezierPath()
        rightFootPath.move(to: CGPoint(x: 16, y: -0))
        rightFootPath.addCurve(to: CGPoint(x: 27, y: 6), controlPoint1: CGPoint(x: 17, y: -0), controlPoint2: CGPoint(x: 24, y: 3))
        rightFootPath.addCurve(to: CGPoint(x: 31.52, y: 14.71), controlPoint1: CGPoint(x: 30, y: 9), controlPoint2: CGPoint(x: 31.52, y: 12.71))
        rightFootPath.addCurve(to: CGPoint(x: 20, y: 31), controlPoint1: CGPoint(x: 31.52, y: 16.71), controlPoint2: CGPoint(x: 22, y: 28))
        rightFootPath.addCurve(to: CGPoint(x: 12, y: 46), controlPoint1: CGPoint(x: 18, y: 34), controlPoint2: CGPoint(x: 14, y: 44))
        rightFootPath.addCurve(to: CGPoint(x: 4, y: 46), controlPoint1: CGPoint(x: 10, y: 48), controlPoint2: CGPoint(x: 8, y: 48))
        rightFootPath.addCurve(to: CGPoint(x: 0, y: 42), controlPoint1: CGPoint(x: 0, y: 44), controlPoint2: CGPoint(x: 0, y: 44))
        rightFootPath.addCurve(to: CGPoint(x: 0.38, y: 40.31), controlPoint1: CGPoint(x: 0, y: 40), controlPoint2: CGPoint(x: 0.38, y: 40.31))
        rightFootPath.addCurve(to: CGPoint(x: 9, y: 27), controlPoint1: CGPoint(x: 0.38, y: 40.31), controlPoint2: CGPoint(x: 6, y: 33))
        rightFootPath.addCurve(to: CGPoint(x: 12, y: 10), controlPoint1: CGPoint(x: 12, y: 21), controlPoint2: CGPoint(x: 12, y: 14))
        rightFootPath.addCurve(to: CGPoint(x: 12.8, y: 2.48), controlPoint1: CGPoint(x: 12, y: 6), controlPoint2: CGPoint(x: 11.58, y: 4.36))
        rightFootPath.addCurve(to: CGPoint(x: 16, y: -0), controlPoint1: CGPoint(x: 14.02, y: 0.61), controlPoint2: CGPoint(x: 15, y: -0))
        rightFootPath.close()
        limitingColor.setFill()
        rightFootPath.fill()

        context.restoreGState()


        //// RightBigToe Drawing
        context.saveGState()
        context.translateBy(x: 68, y: 19)
        context.rotate(by: 23.73 * CGFloat.pi/180)

        let rightBigToePath = UIBezierPath(ovalIn: CGRect(x: -3, y: -4, width: 6, height: 8))
        limitingColor.setFill()
        rightBigToePath.fill()

        context.restoreGState()


        //// Oval 7 Drawing
        context.saveGState()
        context.translateBy(x: 73.5, y: 21.5)
        context.rotate(by: 28.04 * CGFloat.pi/180)

        let oval7Path = UIBezierPath(ovalIn: CGRect(x: -1.5, y: -2.5, width: 3, height: 5))
        limitingColor.setFill()
        oval7Path.fill()

        context.restoreGState()


        //// Oval 8 Drawing
        context.saveGState()
        context.translateBy(x: 76.5, y: 24)
        context.rotate(by: 28.04 * CGFloat.pi/180)

        let oval8Path = UIBezierPath(ovalIn: CGRect(x: -1.5, y: -2.5, width: 3, height: 5))
        limitingColor.setFill()
        oval8Path.fill()

        context.restoreGState()


        //// Oval 9 Drawing
        context.saveGState()
        context.translateBy(x: 79.38, y: 27.22)
        context.rotate(by: 28.04 * CGFloat.pi/180)

        let oval9Path = UIBezierPath(ovalIn: CGRect(x: -1.5, y: -2.25, width: 3, height: 4.5))
        limitingColor.setFill()
        oval9Path.fill()

        context.restoreGState()


        //// Oval 10 Drawing
        context.saveGState()
        context.translateBy(x: 81.65, y: 31.02)
        context.rotate(by: 34.27 * CGFloat.pi/180)

        let oval10Path = UIBezierPath(ovalIn: CGRect(x: -1.5, y: -1.87, width: 3, height: 3.74))
        limitingColor.setFill()
        oval10Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfEcoPrint(value: CGFloat = 0.294) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 98, height: 97), false, 0)
            FootPrintStyleKit.drawEcoPrint(value: value)

        let imageOfEcoPrint = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfEcoPrint
    }




    @objc(FootPrintStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}



private extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
